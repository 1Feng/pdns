// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdns_backend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pdns_backend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pdnsbackend {

namespace {

const ::google::protobuf::Descriptor* DNSLookupMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DNSLookupMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DNSReplyRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DNSReplyRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DNSReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DNSReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pdns_5fbackend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_pdns_5fbackend_2eproto() {
  protobuf_AddDesc_pdns_5fbackend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pdns_backend.proto");
  GOOGLE_CHECK(file != NULL);
  DNSLookupMessage_descriptor_ = file->message_type(0);
  static const int DNSLookupMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSLookupMessage, qtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSLookupMessage, qname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSLookupMessage, remote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSLookupMessage, local_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSLookupMessage, real_remote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSLookupMessage, zone_id_),
  };
  DNSLookupMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DNSLookupMessage_descriptor_,
      DNSLookupMessage::default_instance_,
      DNSLookupMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(DNSLookupMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSLookupMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSLookupMessage, _is_default_instance_));
  DNSReplyRecord_descriptor_ = file->message_type(1);
  static const int DNSReplyRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSReplyRecord, qtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSReplyRecord, qname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSReplyRecord, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSReplyRecord, ttl_),
  };
  DNSReplyRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DNSReplyRecord_descriptor_,
      DNSReplyRecord::default_instance_,
      DNSReplyRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(DNSReplyRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSReplyRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSReplyRecord, _is_default_instance_));
  DNSReply_descriptor_ = file->message_type(2);
  static const int DNSReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSReply, record_),
  };
  DNSReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DNSReply_descriptor_,
      DNSReply::default_instance_,
      DNSReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(DNSReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pdns_5fbackend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DNSLookupMessage_descriptor_, &DNSLookupMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DNSReplyRecord_descriptor_, &DNSReplyRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DNSReply_descriptor_, &DNSReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pdns_5fbackend_2eproto() {
  delete DNSLookupMessage::default_instance_;
  delete DNSLookupMessage_reflection_;
  delete DNSReplyRecord::default_instance_;
  delete DNSReplyRecord_reflection_;
  delete DNSReply::default_instance_;
  delete DNSReply_reflection_;
}

void protobuf_AddDesc_pdns_5fbackend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_pdns_5fbackend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022pdns_backend.proto\022\013pdnsbackend\"u\n\020DNS"
    "LookupMessage\022\r\n\005qtype\030\001 \001(\t\022\r\n\005qname\030\002 "
    "\001(\t\022\016\n\006remote\030\003 \001(\t\022\r\n\005local\030\004 \001(\t\022\023\n\013re"
    "al_remote\030\005 \001(\t\022\017\n\007zone_id\030\006 \001(\005\"L\n\016DNSR"
    "eplyRecord\022\r\n\005qtype\030\001 \001(\t\022\r\n\005qname\030\002 \001(\t"
    "\022\017\n\007content\030\003 \001(\t\022\013\n\003ttl\030\004 \001(\005\"G\n\010DNSRep"
    "ly\022\016\n\006result\030\001 \001(\010\022+\n\006record\030\002 \003(\0132\033.pdn"
    "sbackend.DNSReplyRecord2K\n\007BackEnd\022@\n\006Lo"
    "okUp\022\035.pdnsbackend.DNSLookupMessage\032\025.pd"
    "nsbackend.DNSReply\"\000b\006proto3", 388);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pdns_backend.proto", &protobuf_RegisterTypes);
  DNSLookupMessage::default_instance_ = new DNSLookupMessage();
  DNSReplyRecord::default_instance_ = new DNSReplyRecord();
  DNSReply::default_instance_ = new DNSReply();
  DNSLookupMessage::default_instance_->InitAsDefaultInstance();
  DNSReplyRecord::default_instance_->InitAsDefaultInstance();
  DNSReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pdns_5fbackend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pdns_5fbackend_2eproto {
  StaticDescriptorInitializer_pdns_5fbackend_2eproto() {
    protobuf_AddDesc_pdns_5fbackend_2eproto();
  }
} static_descriptor_initializer_pdns_5fbackend_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSLookupMessage::kQtypeFieldNumber;
const int DNSLookupMessage::kQnameFieldNumber;
const int DNSLookupMessage::kRemoteFieldNumber;
const int DNSLookupMessage::kLocalFieldNumber;
const int DNSLookupMessage::kRealRemoteFieldNumber;
const int DNSLookupMessage::kZoneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSLookupMessage::DNSLookupMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdnsbackend.DNSLookupMessage)
}

void DNSLookupMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DNSLookupMessage::DNSLookupMessage(const DNSLookupMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdnsbackend.DNSLookupMessage)
}

void DNSLookupMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  qtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_remote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_id_ = 0;
}

DNSLookupMessage::~DNSLookupMessage() {
  // @@protoc_insertion_point(destructor:pdnsbackend.DNSLookupMessage)
  SharedDtor();
}

void DNSLookupMessage::SharedDtor() {
  qtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_remote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DNSLookupMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSLookupMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DNSLookupMessage_descriptor_;
}

const DNSLookupMessage& DNSLookupMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdns_5fbackend_2eproto();
  return *default_instance_;
}

DNSLookupMessage* DNSLookupMessage::default_instance_ = NULL;

DNSLookupMessage* DNSLookupMessage::New(::google::protobuf::Arena* arena) const {
  DNSLookupMessage* n = new DNSLookupMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSLookupMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:pdnsbackend.DNSLookupMessage)
  qtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_remote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_id_ = 0;
}

bool DNSLookupMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdnsbackend.DNSLookupMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string qtype = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->qtype().data(), this->qtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdnsbackend.DNSLookupMessage.qtype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_qname;
        break;
      }

      // optional string qname = 2;
      case 2: {
        if (tag == 18) {
         parse_qname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->qname().data(), this->qname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdnsbackend.DNSLookupMessage.qname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remote;
        break;
      }

      // optional string remote = 3;
      case 3: {
        if (tag == 26) {
         parse_remote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote().data(), this->remote().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdnsbackend.DNSLookupMessage.remote"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_local;
        break;
      }

      // optional string local = 4;
      case 4: {
        if (tag == 34) {
         parse_local:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local().data(), this->local().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdnsbackend.DNSLookupMessage.local"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_real_remote;
        break;
      }

      // optional string real_remote = 5;
      case 5: {
        if (tag == 42) {
         parse_real_remote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_remote()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->real_remote().data(), this->real_remote().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdnsbackend.DNSLookupMessage.real_remote"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_zone_id;
        break;
      }

      // optional int32 zone_id = 6;
      case 6: {
        if (tag == 48) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdnsbackend.DNSLookupMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdnsbackend.DNSLookupMessage)
  return false;
#undef DO_
}

void DNSLookupMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdnsbackend.DNSLookupMessage)
  // optional string qtype = 1;
  if (this->qtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qtype().data(), this->qtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSLookupMessage.qtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qtype(), output);
  }

  // optional string qname = 2;
  if (this->qname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qname().data(), this->qname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSLookupMessage.qname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->qname(), output);
  }

  // optional string remote = 3;
  if (this->remote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote().data(), this->remote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSLookupMessage.remote");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remote(), output);
  }

  // optional string local = 4;
  if (this->local().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local().data(), this->local().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSLookupMessage.local");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->local(), output);
  }

  // optional string real_remote = 5;
  if (this->real_remote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->real_remote().data(), this->real_remote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSLookupMessage.real_remote");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->real_remote(), output);
  }

  // optional int32 zone_id = 6;
  if (this->zone_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zone_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdnsbackend.DNSLookupMessage)
}

::google::protobuf::uint8* DNSLookupMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdnsbackend.DNSLookupMessage)
  // optional string qtype = 1;
  if (this->qtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qtype().data(), this->qtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSLookupMessage.qtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qtype(), target);
  }

  // optional string qname = 2;
  if (this->qname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qname().data(), this->qname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSLookupMessage.qname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->qname(), target);
  }

  // optional string remote = 3;
  if (this->remote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote().data(), this->remote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSLookupMessage.remote");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remote(), target);
  }

  // optional string local = 4;
  if (this->local().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local().data(), this->local().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSLookupMessage.local");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->local(), target);
  }

  // optional string real_remote = 5;
  if (this->real_remote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->real_remote().data(), this->real_remote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSLookupMessage.real_remote");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->real_remote(), target);
  }

  // optional int32 zone_id = 6;
  if (this->zone_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zone_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdnsbackend.DNSLookupMessage)
  return target;
}

int DNSLookupMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pdnsbackend.DNSLookupMessage)
  int total_size = 0;

  // optional string qtype = 1;
  if (this->qtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qtype());
  }

  // optional string qname = 2;
  if (this->qname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qname());
  }

  // optional string remote = 3;
  if (this->remote().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote());
  }

  // optional string local = 4;
  if (this->local().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local());
  }

  // optional string real_remote = 5;
  if (this->real_remote().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->real_remote());
  }

  // optional int32 zone_id = 6;
  if (this->zone_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zone_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSLookupMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdnsbackend.DNSLookupMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DNSLookupMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSLookupMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdnsbackend.DNSLookupMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdnsbackend.DNSLookupMessage)
    MergeFrom(*source);
  }
}

void DNSLookupMessage::MergeFrom(const DNSLookupMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdnsbackend.DNSLookupMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.qtype().size() > 0) {

    qtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qtype_);
  }
  if (from.qname().size() > 0) {

    qname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qname_);
  }
  if (from.remote().size() > 0) {

    remote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_);
  }
  if (from.local().size() > 0) {

    local_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_);
  }
  if (from.real_remote().size() > 0) {

    real_remote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.real_remote_);
  }
  if (from.zone_id() != 0) {
    set_zone_id(from.zone_id());
  }
}

void DNSLookupMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdnsbackend.DNSLookupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSLookupMessage::CopyFrom(const DNSLookupMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdnsbackend.DNSLookupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSLookupMessage::IsInitialized() const {

  return true;
}

void DNSLookupMessage::Swap(DNSLookupMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSLookupMessage::InternalSwap(DNSLookupMessage* other) {
  qtype_.Swap(&other->qtype_);
  qname_.Swap(&other->qname_);
  remote_.Swap(&other->remote_);
  local_.Swap(&other->local_);
  real_remote_.Swap(&other->real_remote_);
  std::swap(zone_id_, other->zone_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSLookupMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DNSLookupMessage_descriptor_;
  metadata.reflection = DNSLookupMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DNSLookupMessage

// optional string qtype = 1;
void DNSLookupMessage::clear_qtype() {
  qtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DNSLookupMessage::qtype() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.qtype)
  return qtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSLookupMessage::set_qtype(const ::std::string& value) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.qtype)
}
 void DNSLookupMessage::set_qtype(const char* value) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSLookupMessage.qtype)
}
 void DNSLookupMessage::set_qtype(const char* value, size_t size) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSLookupMessage.qtype)
}
 ::std::string* DNSLookupMessage::mutable_qtype() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSLookupMessage.qtype)
  return qtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DNSLookupMessage::release_qtype() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSLookupMessage.qtype)
  
  return qtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSLookupMessage::set_allocated_qtype(::std::string* qtype) {
  if (qtype != NULL) {
    
  } else {
    
  }
  qtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qtype);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSLookupMessage.qtype)
}

// optional string qname = 2;
void DNSLookupMessage::clear_qname() {
  qname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DNSLookupMessage::qname() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.qname)
  return qname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSLookupMessage::set_qname(const ::std::string& value) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.qname)
}
 void DNSLookupMessage::set_qname(const char* value) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSLookupMessage.qname)
}
 void DNSLookupMessage::set_qname(const char* value, size_t size) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSLookupMessage.qname)
}
 ::std::string* DNSLookupMessage::mutable_qname() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSLookupMessage.qname)
  return qname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DNSLookupMessage::release_qname() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSLookupMessage.qname)
  
  return qname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSLookupMessage::set_allocated_qname(::std::string* qname) {
  if (qname != NULL) {
    
  } else {
    
  }
  qname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qname);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSLookupMessage.qname)
}

// optional string remote = 3;
void DNSLookupMessage::clear_remote() {
  remote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DNSLookupMessage::remote() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.remote)
  return remote_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSLookupMessage::set_remote(const ::std::string& value) {
  
  remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.remote)
}
 void DNSLookupMessage::set_remote(const char* value) {
  
  remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSLookupMessage.remote)
}
 void DNSLookupMessage::set_remote(const char* value, size_t size) {
  
  remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSLookupMessage.remote)
}
 ::std::string* DNSLookupMessage::mutable_remote() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSLookupMessage.remote)
  return remote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DNSLookupMessage::release_remote() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSLookupMessage.remote)
  
  return remote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSLookupMessage::set_allocated_remote(::std::string* remote) {
  if (remote != NULL) {
    
  } else {
    
  }
  remote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSLookupMessage.remote)
}

// optional string local = 4;
void DNSLookupMessage::clear_local() {
  local_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DNSLookupMessage::local() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.local)
  return local_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSLookupMessage::set_local(const ::std::string& value) {
  
  local_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.local)
}
 void DNSLookupMessage::set_local(const char* value) {
  
  local_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSLookupMessage.local)
}
 void DNSLookupMessage::set_local(const char* value, size_t size) {
  
  local_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSLookupMessage.local)
}
 ::std::string* DNSLookupMessage::mutable_local() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSLookupMessage.local)
  return local_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DNSLookupMessage::release_local() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSLookupMessage.local)
  
  return local_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSLookupMessage::set_allocated_local(::std::string* local) {
  if (local != NULL) {
    
  } else {
    
  }
  local_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSLookupMessage.local)
}

// optional string real_remote = 5;
void DNSLookupMessage::clear_real_remote() {
  real_remote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DNSLookupMessage::real_remote() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.real_remote)
  return real_remote_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSLookupMessage::set_real_remote(const ::std::string& value) {
  
  real_remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.real_remote)
}
 void DNSLookupMessage::set_real_remote(const char* value) {
  
  real_remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSLookupMessage.real_remote)
}
 void DNSLookupMessage::set_real_remote(const char* value, size_t size) {
  
  real_remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSLookupMessage.real_remote)
}
 ::std::string* DNSLookupMessage::mutable_real_remote() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSLookupMessage.real_remote)
  return real_remote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DNSLookupMessage::release_real_remote() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSLookupMessage.real_remote)
  
  return real_remote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSLookupMessage::set_allocated_real_remote(::std::string* real_remote) {
  if (real_remote != NULL) {
    
  } else {
    
  }
  real_remote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), real_remote);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSLookupMessage.real_remote)
}

// optional int32 zone_id = 6;
void DNSLookupMessage::clear_zone_id() {
  zone_id_ = 0;
}
 ::google::protobuf::int32 DNSLookupMessage::zone_id() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.zone_id)
  return zone_id_;
}
 void DNSLookupMessage::set_zone_id(::google::protobuf::int32 value) {
  
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.zone_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSReplyRecord::kQtypeFieldNumber;
const int DNSReplyRecord::kQnameFieldNumber;
const int DNSReplyRecord::kContentFieldNumber;
const int DNSReplyRecord::kTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSReplyRecord::DNSReplyRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdnsbackend.DNSReplyRecord)
}

void DNSReplyRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DNSReplyRecord::DNSReplyRecord(const DNSReplyRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdnsbackend.DNSReplyRecord)
}

void DNSReplyRecord::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  qtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttl_ = 0;
}

DNSReplyRecord::~DNSReplyRecord() {
  // @@protoc_insertion_point(destructor:pdnsbackend.DNSReplyRecord)
  SharedDtor();
}

void DNSReplyRecord::SharedDtor() {
  qtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DNSReplyRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSReplyRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DNSReplyRecord_descriptor_;
}

const DNSReplyRecord& DNSReplyRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdns_5fbackend_2eproto();
  return *default_instance_;
}

DNSReplyRecord* DNSReplyRecord::default_instance_ = NULL;

DNSReplyRecord* DNSReplyRecord::New(::google::protobuf::Arena* arena) const {
  DNSReplyRecord* n = new DNSReplyRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSReplyRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pdnsbackend.DNSReplyRecord)
  qtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttl_ = 0;
}

bool DNSReplyRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdnsbackend.DNSReplyRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string qtype = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->qtype().data(), this->qtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdnsbackend.DNSReplyRecord.qtype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_qname;
        break;
      }

      // optional string qname = 2;
      case 2: {
        if (tag == 18) {
         parse_qname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->qname().data(), this->qname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdnsbackend.DNSReplyRecord.qname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdnsbackend.DNSReplyRecord.content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ttl;
        break;
      }

      // optional int32 ttl = 4;
      case 4: {
        if (tag == 32) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdnsbackend.DNSReplyRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdnsbackend.DNSReplyRecord)
  return false;
#undef DO_
}

void DNSReplyRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdnsbackend.DNSReplyRecord)
  // optional string qtype = 1;
  if (this->qtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qtype().data(), this->qtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSReplyRecord.qtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qtype(), output);
  }

  // optional string qname = 2;
  if (this->qname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qname().data(), this->qname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSReplyRecord.qname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->qname(), output);
  }

  // optional string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSReplyRecord.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional int32 ttl = 4;
  if (this->ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ttl(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdnsbackend.DNSReplyRecord)
}

::google::protobuf::uint8* DNSReplyRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdnsbackend.DNSReplyRecord)
  // optional string qtype = 1;
  if (this->qtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qtype().data(), this->qtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSReplyRecord.qtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qtype(), target);
  }

  // optional string qname = 2;
  if (this->qname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qname().data(), this->qname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSReplyRecord.qname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->qname(), target);
  }

  // optional string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdnsbackend.DNSReplyRecord.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional int32 ttl = 4;
  if (this->ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ttl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdnsbackend.DNSReplyRecord)
  return target;
}

int DNSReplyRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pdnsbackend.DNSReplyRecord)
  int total_size = 0;

  // optional string qtype = 1;
  if (this->qtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qtype());
  }

  // optional string qname = 2;
  if (this->qname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qname());
  }

  // optional string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // optional int32 ttl = 4;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ttl());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSReplyRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdnsbackend.DNSReplyRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DNSReplyRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSReplyRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdnsbackend.DNSReplyRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdnsbackend.DNSReplyRecord)
    MergeFrom(*source);
  }
}

void DNSReplyRecord::MergeFrom(const DNSReplyRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdnsbackend.DNSReplyRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.qtype().size() > 0) {

    qtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qtype_);
  }
  if (from.qname().size() > 0) {

    qname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qname_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.ttl() != 0) {
    set_ttl(from.ttl());
  }
}

void DNSReplyRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdnsbackend.DNSReplyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSReplyRecord::CopyFrom(const DNSReplyRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdnsbackend.DNSReplyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSReplyRecord::IsInitialized() const {

  return true;
}

void DNSReplyRecord::Swap(DNSReplyRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSReplyRecord::InternalSwap(DNSReplyRecord* other) {
  qtype_.Swap(&other->qtype_);
  qname_.Swap(&other->qname_);
  content_.Swap(&other->content_);
  std::swap(ttl_, other->ttl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSReplyRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DNSReplyRecord_descriptor_;
  metadata.reflection = DNSReplyRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DNSReplyRecord

// optional string qtype = 1;
void DNSReplyRecord::clear_qtype() {
  qtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DNSReplyRecord::qtype() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReplyRecord.qtype)
  return qtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSReplyRecord::set_qtype(const ::std::string& value) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSReplyRecord.qtype)
}
 void DNSReplyRecord::set_qtype(const char* value) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSReplyRecord.qtype)
}
 void DNSReplyRecord::set_qtype(const char* value, size_t size) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSReplyRecord.qtype)
}
 ::std::string* DNSReplyRecord::mutable_qtype() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSReplyRecord.qtype)
  return qtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DNSReplyRecord::release_qtype() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSReplyRecord.qtype)
  
  return qtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSReplyRecord::set_allocated_qtype(::std::string* qtype) {
  if (qtype != NULL) {
    
  } else {
    
  }
  qtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qtype);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSReplyRecord.qtype)
}

// optional string qname = 2;
void DNSReplyRecord::clear_qname() {
  qname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DNSReplyRecord::qname() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReplyRecord.qname)
  return qname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSReplyRecord::set_qname(const ::std::string& value) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSReplyRecord.qname)
}
 void DNSReplyRecord::set_qname(const char* value) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSReplyRecord.qname)
}
 void DNSReplyRecord::set_qname(const char* value, size_t size) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSReplyRecord.qname)
}
 ::std::string* DNSReplyRecord::mutable_qname() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSReplyRecord.qname)
  return qname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DNSReplyRecord::release_qname() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSReplyRecord.qname)
  
  return qname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSReplyRecord::set_allocated_qname(::std::string* qname) {
  if (qname != NULL) {
    
  } else {
    
  }
  qname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qname);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSReplyRecord.qname)
}

// optional string content = 3;
void DNSReplyRecord::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DNSReplyRecord::content() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReplyRecord.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSReplyRecord::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSReplyRecord.content)
}
 void DNSReplyRecord::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSReplyRecord.content)
}
 void DNSReplyRecord::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSReplyRecord.content)
}
 ::std::string* DNSReplyRecord::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSReplyRecord.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DNSReplyRecord::release_content() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSReplyRecord.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DNSReplyRecord::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSReplyRecord.content)
}

// optional int32 ttl = 4;
void DNSReplyRecord::clear_ttl() {
  ttl_ = 0;
}
 ::google::protobuf::int32 DNSReplyRecord::ttl() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReplyRecord.ttl)
  return ttl_;
}
 void DNSReplyRecord::set_ttl(::google::protobuf::int32 value) {
  
  ttl_ = value;
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSReplyRecord.ttl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSReply::kResultFieldNumber;
const int DNSReply::kRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSReply::DNSReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdnsbackend.DNSReply)
}

void DNSReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DNSReply::DNSReply(const DNSReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdnsbackend.DNSReply)
}

void DNSReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = false;
}

DNSReply::~DNSReply() {
  // @@protoc_insertion_point(destructor:pdnsbackend.DNSReply)
  SharedDtor();
}

void DNSReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DNSReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DNSReply_descriptor_;
}

const DNSReply& DNSReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdns_5fbackend_2eproto();
  return *default_instance_;
}

DNSReply* DNSReply::default_instance_ = NULL;

DNSReply* DNSReply::New(::google::protobuf::Arena* arena) const {
  DNSReply* n = new DNSReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pdnsbackend.DNSReply)
  result_ = false;
  record_.Clear();
}

bool DNSReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdnsbackend.DNSReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }

      // repeated .pdnsbackend.DNSReplyRecord record = 2;
      case 2: {
        if (tag == 18) {
         parse_record:
          DO_(input->IncrementRecursionDepth());
         parse_loop_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_record;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdnsbackend.DNSReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdnsbackend.DNSReply)
  return false;
#undef DO_
}

void DNSReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdnsbackend.DNSReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // repeated .pdnsbackend.DNSReplyRecord record = 2;
  for (unsigned int i = 0, n = this->record_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pdnsbackend.DNSReply)
}

::google::protobuf::uint8* DNSReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdnsbackend.DNSReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // repeated .pdnsbackend.DNSReplyRecord record = 2;
  for (unsigned int i = 0, n = this->record_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->record(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdnsbackend.DNSReply)
  return target;
}

int DNSReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pdnsbackend.DNSReply)
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // repeated .pdnsbackend.DNSReplyRecord record = 2;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdnsbackend.DNSReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DNSReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdnsbackend.DNSReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdnsbackend.DNSReply)
    MergeFrom(*source);
  }
}

void DNSReply::MergeFrom(const DNSReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdnsbackend.DNSReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  record_.MergeFrom(from.record_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void DNSReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdnsbackend.DNSReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSReply::CopyFrom(const DNSReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdnsbackend.DNSReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSReply::IsInitialized() const {

  return true;
}

void DNSReply::Swap(DNSReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSReply::InternalSwap(DNSReply* other) {
  std::swap(result_, other->result_);
  record_.UnsafeArenaSwap(&other->record_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DNSReply_descriptor_;
  metadata.reflection = DNSReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DNSReply

// optional bool result = 1;
void DNSReply::clear_result() {
  result_ = false;
}
 bool DNSReply::result() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReply.result)
  return result_;
}
 void DNSReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSReply.result)
}

// repeated .pdnsbackend.DNSReplyRecord record = 2;
int DNSReply::record_size() const {
  return record_.size();
}
void DNSReply::clear_record() {
  record_.Clear();
}
const ::pdnsbackend::DNSReplyRecord& DNSReply::record(int index) const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReply.record)
  return record_.Get(index);
}
::pdnsbackend::DNSReplyRecord* DNSReply::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSReply.record)
  return record_.Mutable(index);
}
::pdnsbackend::DNSReplyRecord* DNSReply::add_record() {
  // @@protoc_insertion_point(field_add:pdnsbackend.DNSReply.record)
  return record_.Add();
}
::google::protobuf::RepeatedPtrField< ::pdnsbackend::DNSReplyRecord >*
DNSReply::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:pdnsbackend.DNSReply.record)
  return &record_;
}
const ::google::protobuf::RepeatedPtrField< ::pdnsbackend::DNSReplyRecord >&
DNSReply::record() const {
  // @@protoc_insertion_point(field_list:pdnsbackend.DNSReply.record)
  return record_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pdnsbackend

// @@protoc_insertion_point(global_scope)
