// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdns_backend.proto

#ifndef PROTOBUF_pdns_5fbackend_2eproto__INCLUDED
#define PROTOBUF_pdns_5fbackend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pdnsbackend {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_pdns_5fbackend_2eproto();
void protobuf_AssignDesc_pdns_5fbackend_2eproto();
void protobuf_ShutdownFile_pdns_5fbackend_2eproto();

class DNSLookupMessage;
class DNSReply;
class DNSReplyRecord;

// ===================================================================

class DNSLookupMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pdnsbackend.DNSLookupMessage) */ {
 public:
  DNSLookupMessage();
  virtual ~DNSLookupMessage();

  DNSLookupMessage(const DNSLookupMessage& from);

  inline DNSLookupMessage& operator=(const DNSLookupMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DNSLookupMessage& default_instance();

  void Swap(DNSLookupMessage* other);

  // implements Message ----------------------------------------------

  inline DNSLookupMessage* New() const { return New(NULL); }

  DNSLookupMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DNSLookupMessage& from);
  void MergeFrom(const DNSLookupMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DNSLookupMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string qtype = 1;
  void clear_qtype();
  static const int kQtypeFieldNumber = 1;
  const ::std::string& qtype() const;
  void set_qtype(const ::std::string& value);
  void set_qtype(const char* value);
  void set_qtype(const char* value, size_t size);
  ::std::string* mutable_qtype();
  ::std::string* release_qtype();
  void set_allocated_qtype(::std::string* qtype);

  // optional string qname = 2;
  void clear_qname();
  static const int kQnameFieldNumber = 2;
  const ::std::string& qname() const;
  void set_qname(const ::std::string& value);
  void set_qname(const char* value);
  void set_qname(const char* value, size_t size);
  ::std::string* mutable_qname();
  ::std::string* release_qname();
  void set_allocated_qname(::std::string* qname);

  // optional string remote = 3;
  void clear_remote();
  static const int kRemoteFieldNumber = 3;
  const ::std::string& remote() const;
  void set_remote(const ::std::string& value);
  void set_remote(const char* value);
  void set_remote(const char* value, size_t size);
  ::std::string* mutable_remote();
  ::std::string* release_remote();
  void set_allocated_remote(::std::string* remote);

  // optional string local = 4;
  void clear_local();
  static const int kLocalFieldNumber = 4;
  const ::std::string& local() const;
  void set_local(const ::std::string& value);
  void set_local(const char* value);
  void set_local(const char* value, size_t size);
  ::std::string* mutable_local();
  ::std::string* release_local();
  void set_allocated_local(::std::string* local);

  // optional string real_remote = 5;
  void clear_real_remote();
  static const int kRealRemoteFieldNumber = 5;
  const ::std::string& real_remote() const;
  void set_real_remote(const ::std::string& value);
  void set_real_remote(const char* value);
  void set_real_remote(const char* value, size_t size);
  ::std::string* mutable_real_remote();
  ::std::string* release_real_remote();
  void set_allocated_real_remote(::std::string* real_remote);

  // optional int32 zone_id = 6;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 6;
  ::google::protobuf::int32 zone_id() const;
  void set_zone_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pdnsbackend.DNSLookupMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr qtype_;
  ::google::protobuf::internal::ArenaStringPtr qname_;
  ::google::protobuf::internal::ArenaStringPtr remote_;
  ::google::protobuf::internal::ArenaStringPtr local_;
  ::google::protobuf::internal::ArenaStringPtr real_remote_;
  ::google::protobuf::int32 zone_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdns_5fbackend_2eproto();
  friend void protobuf_AssignDesc_pdns_5fbackend_2eproto();
  friend void protobuf_ShutdownFile_pdns_5fbackend_2eproto();

  void InitAsDefaultInstance();
  static DNSLookupMessage* default_instance_;
};
// -------------------------------------------------------------------

class DNSReplyRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pdnsbackend.DNSReplyRecord) */ {
 public:
  DNSReplyRecord();
  virtual ~DNSReplyRecord();

  DNSReplyRecord(const DNSReplyRecord& from);

  inline DNSReplyRecord& operator=(const DNSReplyRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DNSReplyRecord& default_instance();

  void Swap(DNSReplyRecord* other);

  // implements Message ----------------------------------------------

  inline DNSReplyRecord* New() const { return New(NULL); }

  DNSReplyRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DNSReplyRecord& from);
  void MergeFrom(const DNSReplyRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DNSReplyRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string qtype = 1;
  void clear_qtype();
  static const int kQtypeFieldNumber = 1;
  const ::std::string& qtype() const;
  void set_qtype(const ::std::string& value);
  void set_qtype(const char* value);
  void set_qtype(const char* value, size_t size);
  ::std::string* mutable_qtype();
  ::std::string* release_qtype();
  void set_allocated_qtype(::std::string* qtype);

  // optional string qname = 2;
  void clear_qname();
  static const int kQnameFieldNumber = 2;
  const ::std::string& qname() const;
  void set_qname(const ::std::string& value);
  void set_qname(const char* value);
  void set_qname(const char* value, size_t size);
  ::std::string* mutable_qname();
  ::std::string* release_qname();
  void set_allocated_qname(::std::string* qname);

  // optional string content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional int32 ttl = 4;
  void clear_ttl();
  static const int kTtlFieldNumber = 4;
  ::google::protobuf::int32 ttl() const;
  void set_ttl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pdnsbackend.DNSReplyRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr qtype_;
  ::google::protobuf::internal::ArenaStringPtr qname_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 ttl_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdns_5fbackend_2eproto();
  friend void protobuf_AssignDesc_pdns_5fbackend_2eproto();
  friend void protobuf_ShutdownFile_pdns_5fbackend_2eproto();

  void InitAsDefaultInstance();
  static DNSReplyRecord* default_instance_;
};
// -------------------------------------------------------------------

class DNSReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pdnsbackend.DNSReply) */ {
 public:
  DNSReply();
  virtual ~DNSReply();

  DNSReply(const DNSReply& from);

  inline DNSReply& operator=(const DNSReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DNSReply& default_instance();

  void Swap(DNSReply* other);

  // implements Message ----------------------------------------------

  inline DNSReply* New() const { return New(NULL); }

  DNSReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DNSReply& from);
  void MergeFrom(const DNSReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DNSReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // repeated .pdnsbackend.DNSReplyRecord record = 2;
  int record_size() const;
  void clear_record();
  static const int kRecordFieldNumber = 2;
  const ::pdnsbackend::DNSReplyRecord& record(int index) const;
  ::pdnsbackend::DNSReplyRecord* mutable_record(int index);
  ::pdnsbackend::DNSReplyRecord* add_record();
  ::google::protobuf::RepeatedPtrField< ::pdnsbackend::DNSReplyRecord >*
      mutable_record();
  const ::google::protobuf::RepeatedPtrField< ::pdnsbackend::DNSReplyRecord >&
      record() const;

  // @@protoc_insertion_point(class_scope:pdnsbackend.DNSReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::pdnsbackend::DNSReplyRecord > record_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdns_5fbackend_2eproto();
  friend void protobuf_AssignDesc_pdns_5fbackend_2eproto();
  friend void protobuf_ShutdownFile_pdns_5fbackend_2eproto();

  void InitAsDefaultInstance();
  static DNSReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DNSLookupMessage

// optional string qtype = 1;
inline void DNSLookupMessage::clear_qtype() {
  qtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DNSLookupMessage::qtype() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.qtype)
  return qtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSLookupMessage::set_qtype(const ::std::string& value) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.qtype)
}
inline void DNSLookupMessage::set_qtype(const char* value) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSLookupMessage.qtype)
}
inline void DNSLookupMessage::set_qtype(const char* value, size_t size) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSLookupMessage.qtype)
}
inline ::std::string* DNSLookupMessage::mutable_qtype() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSLookupMessage.qtype)
  return qtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DNSLookupMessage::release_qtype() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSLookupMessage.qtype)
  
  return qtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSLookupMessage::set_allocated_qtype(::std::string* qtype) {
  if (qtype != NULL) {
    
  } else {
    
  }
  qtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qtype);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSLookupMessage.qtype)
}

// optional string qname = 2;
inline void DNSLookupMessage::clear_qname() {
  qname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DNSLookupMessage::qname() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.qname)
  return qname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSLookupMessage::set_qname(const ::std::string& value) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.qname)
}
inline void DNSLookupMessage::set_qname(const char* value) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSLookupMessage.qname)
}
inline void DNSLookupMessage::set_qname(const char* value, size_t size) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSLookupMessage.qname)
}
inline ::std::string* DNSLookupMessage::mutable_qname() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSLookupMessage.qname)
  return qname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DNSLookupMessage::release_qname() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSLookupMessage.qname)
  
  return qname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSLookupMessage::set_allocated_qname(::std::string* qname) {
  if (qname != NULL) {
    
  } else {
    
  }
  qname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qname);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSLookupMessage.qname)
}

// optional string remote = 3;
inline void DNSLookupMessage::clear_remote() {
  remote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DNSLookupMessage::remote() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.remote)
  return remote_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSLookupMessage::set_remote(const ::std::string& value) {
  
  remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.remote)
}
inline void DNSLookupMessage::set_remote(const char* value) {
  
  remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSLookupMessage.remote)
}
inline void DNSLookupMessage::set_remote(const char* value, size_t size) {
  
  remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSLookupMessage.remote)
}
inline ::std::string* DNSLookupMessage::mutable_remote() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSLookupMessage.remote)
  return remote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DNSLookupMessage::release_remote() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSLookupMessage.remote)
  
  return remote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSLookupMessage::set_allocated_remote(::std::string* remote) {
  if (remote != NULL) {
    
  } else {
    
  }
  remote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSLookupMessage.remote)
}

// optional string local = 4;
inline void DNSLookupMessage::clear_local() {
  local_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DNSLookupMessage::local() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.local)
  return local_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSLookupMessage::set_local(const ::std::string& value) {
  
  local_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.local)
}
inline void DNSLookupMessage::set_local(const char* value) {
  
  local_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSLookupMessage.local)
}
inline void DNSLookupMessage::set_local(const char* value, size_t size) {
  
  local_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSLookupMessage.local)
}
inline ::std::string* DNSLookupMessage::mutable_local() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSLookupMessage.local)
  return local_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DNSLookupMessage::release_local() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSLookupMessage.local)
  
  return local_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSLookupMessage::set_allocated_local(::std::string* local) {
  if (local != NULL) {
    
  } else {
    
  }
  local_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSLookupMessage.local)
}

// optional string real_remote = 5;
inline void DNSLookupMessage::clear_real_remote() {
  real_remote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DNSLookupMessage::real_remote() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.real_remote)
  return real_remote_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSLookupMessage::set_real_remote(const ::std::string& value) {
  
  real_remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.real_remote)
}
inline void DNSLookupMessage::set_real_remote(const char* value) {
  
  real_remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSLookupMessage.real_remote)
}
inline void DNSLookupMessage::set_real_remote(const char* value, size_t size) {
  
  real_remote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSLookupMessage.real_remote)
}
inline ::std::string* DNSLookupMessage::mutable_real_remote() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSLookupMessage.real_remote)
  return real_remote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DNSLookupMessage::release_real_remote() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSLookupMessage.real_remote)
  
  return real_remote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSLookupMessage::set_allocated_real_remote(::std::string* real_remote) {
  if (real_remote != NULL) {
    
  } else {
    
  }
  real_remote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), real_remote);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSLookupMessage.real_remote)
}

// optional int32 zone_id = 6;
inline void DNSLookupMessage::clear_zone_id() {
  zone_id_ = 0;
}
inline ::google::protobuf::int32 DNSLookupMessage::zone_id() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSLookupMessage.zone_id)
  return zone_id_;
}
inline void DNSLookupMessage::set_zone_id(::google::protobuf::int32 value) {
  
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSLookupMessage.zone_id)
}

// -------------------------------------------------------------------

// DNSReplyRecord

// optional string qtype = 1;
inline void DNSReplyRecord::clear_qtype() {
  qtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DNSReplyRecord::qtype() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReplyRecord.qtype)
  return qtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSReplyRecord::set_qtype(const ::std::string& value) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSReplyRecord.qtype)
}
inline void DNSReplyRecord::set_qtype(const char* value) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSReplyRecord.qtype)
}
inline void DNSReplyRecord::set_qtype(const char* value, size_t size) {
  
  qtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSReplyRecord.qtype)
}
inline ::std::string* DNSReplyRecord::mutable_qtype() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSReplyRecord.qtype)
  return qtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DNSReplyRecord::release_qtype() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSReplyRecord.qtype)
  
  return qtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSReplyRecord::set_allocated_qtype(::std::string* qtype) {
  if (qtype != NULL) {
    
  } else {
    
  }
  qtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qtype);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSReplyRecord.qtype)
}

// optional string qname = 2;
inline void DNSReplyRecord::clear_qname() {
  qname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DNSReplyRecord::qname() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReplyRecord.qname)
  return qname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSReplyRecord::set_qname(const ::std::string& value) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSReplyRecord.qname)
}
inline void DNSReplyRecord::set_qname(const char* value) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSReplyRecord.qname)
}
inline void DNSReplyRecord::set_qname(const char* value, size_t size) {
  
  qname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSReplyRecord.qname)
}
inline ::std::string* DNSReplyRecord::mutable_qname() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSReplyRecord.qname)
  return qname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DNSReplyRecord::release_qname() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSReplyRecord.qname)
  
  return qname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSReplyRecord::set_allocated_qname(::std::string* qname) {
  if (qname != NULL) {
    
  } else {
    
  }
  qname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qname);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSReplyRecord.qname)
}

// optional string content = 3;
inline void DNSReplyRecord::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DNSReplyRecord::content() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReplyRecord.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSReplyRecord::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSReplyRecord.content)
}
inline void DNSReplyRecord::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdnsbackend.DNSReplyRecord.content)
}
inline void DNSReplyRecord::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdnsbackend.DNSReplyRecord.content)
}
inline ::std::string* DNSReplyRecord::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSReplyRecord.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DNSReplyRecord::release_content() {
  // @@protoc_insertion_point(field_release:pdnsbackend.DNSReplyRecord.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSReplyRecord::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pdnsbackend.DNSReplyRecord.content)
}

// optional int32 ttl = 4;
inline void DNSReplyRecord::clear_ttl() {
  ttl_ = 0;
}
inline ::google::protobuf::int32 DNSReplyRecord::ttl() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReplyRecord.ttl)
  return ttl_;
}
inline void DNSReplyRecord::set_ttl(::google::protobuf::int32 value) {
  
  ttl_ = value;
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSReplyRecord.ttl)
}

// -------------------------------------------------------------------

// DNSReply

// optional bool result = 1;
inline void DNSReply::clear_result() {
  result_ = false;
}
inline bool DNSReply::result() const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReply.result)
  return result_;
}
inline void DNSReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:pdnsbackend.DNSReply.result)
}

// repeated .pdnsbackend.DNSReplyRecord record = 2;
inline int DNSReply::record_size() const {
  return record_.size();
}
inline void DNSReply::clear_record() {
  record_.Clear();
}
inline const ::pdnsbackend::DNSReplyRecord& DNSReply::record(int index) const {
  // @@protoc_insertion_point(field_get:pdnsbackend.DNSReply.record)
  return record_.Get(index);
}
inline ::pdnsbackend::DNSReplyRecord* DNSReply::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:pdnsbackend.DNSReply.record)
  return record_.Mutable(index);
}
inline ::pdnsbackend::DNSReplyRecord* DNSReply::add_record() {
  // @@protoc_insertion_point(field_add:pdnsbackend.DNSReply.record)
  return record_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pdnsbackend::DNSReplyRecord >*
DNSReply::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:pdnsbackend.DNSReply.record)
  return &record_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pdnsbackend::DNSReplyRecord >&
DNSReply::record() const {
  // @@protoc_insertion_point(field_list:pdnsbackend.DNSReply.record)
  return record_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pdnsbackend

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pdns_5fbackend_2eproto__INCLUDED
